/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TaskLoopRunLister helps list TaskLoopRuns.
type TaskLoopRunLister interface {
	// List lists all TaskLoopRuns in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.TaskLoopRun, err error)
	// TaskLoopRuns returns an object that can list and get TaskLoopRuns.
	TaskLoopRuns(namespace string) TaskLoopRunNamespaceLister
	TaskLoopRunListerExpansion
}

// taskLoopRunLister implements the TaskLoopRunLister interface.
type taskLoopRunLister struct {
	indexer cache.Indexer
}

// NewTaskLoopRunLister returns a new TaskLoopRunLister.
func NewTaskLoopRunLister(indexer cache.Indexer) TaskLoopRunLister {
	return &taskLoopRunLister{indexer: indexer}
}

// List lists all TaskLoopRuns in the indexer.
func (s *taskLoopRunLister) List(selector labels.Selector) (ret []*v1beta1.TaskLoopRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.TaskLoopRun))
	})
	return ret, err
}

// TaskLoopRuns returns an object that can list and get TaskLoopRuns.
func (s *taskLoopRunLister) TaskLoopRuns(namespace string) TaskLoopRunNamespaceLister {
	return taskLoopRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TaskLoopRunNamespaceLister helps list and get TaskLoopRuns.
type TaskLoopRunNamespaceLister interface {
	// List lists all TaskLoopRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.TaskLoopRun, err error)
	// Get retrieves the TaskLoopRun from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.TaskLoopRun, error)
	TaskLoopRunNamespaceListerExpansion
}

// taskLoopRunNamespaceLister implements the TaskLoopRunNamespaceLister
// interface.
type taskLoopRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TaskLoopRuns in the indexer for a given namespace.
func (s taskLoopRunNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.TaskLoopRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.TaskLoopRun))
	})
	return ret, err
}

// Get retrieves the TaskLoopRun from the indexer for a given namespace and name.
func (s taskLoopRunNamespaceLister) Get(name string) (*v1beta1.TaskLoopRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("tasklooprun"), name)
	}
	return obj.(*v1beta1.TaskLoopRun), nil
}
